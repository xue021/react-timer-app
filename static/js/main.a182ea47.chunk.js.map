{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","timerValue","lastTime","timerType","timerActive","countdownValue","setInterval","ReactDOM","render","Date","now","id","onClick","toFixed","Audio","play","type","placeholder","onChange","event","target","value","document","getElementById"],"mappings":"0MAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAIC,EAAa,EACbC,EAAW,EACXC,EAAY,YACZC,GAAc,EACdC,EAAiB,EACrBC,aAGA,WACEC,IAASC,QA+ENJ,IACDH,GAAcQ,KAAKC,MAAMR,QAE3BA,EAASO,KAAKC,OAvEZ,yBAAKC,GAAG,QACN,4BAAKR,GACL,6BACA,4BAAQS,QAAS,WAAKT,EAAU,YAAYF,EAAY,EAAEG,GAAY,IAAtE,aACA,4BAAQQ,QAAS,WAAKT,EAAU,YAAYF,EAAY,EAAEG,GAAY,IAAtE,aACA,6BACe,cAAdD,EAQH,6BACIF,EAAa,EACb,4BAAQW,QAAS,WAAKR,GAAY,EAAMH,EAAa,IAArD,SAEA,4BAAQW,QAAS,WAAKR,GAAY,EAAKH,EAAa,IAApD,SAGDA,EAAa,EACZ,4BAAQW,QAAS,kBAAkBR,GAAdA,IAAyDA,EAA4B,IAAdH,EAAkB,OAAQ,UAEtH,GAEF,6BAAMA,EAAW,KAAMY,QAAQ,GAA/B,OAWc,IAAfR,EAAoBJ,EAAW,IAChCG,GAAc,EACdH,EAA4B,IAAfI,EAsCH,IAAIS,MAAM,oFAChBC,QAnCJ,6BACGd,EAAa,EAAI,GAAG,2BAAOe,KAAK,OAAOC,YAAY,qBAAqBC,SAAU,SAACC,GAAD,OAASd,EAAec,EAAMC,OAAOC,SAIvHpB,EAAa,EACZ,4BAAQW,QAAS,WAAKR,GAAY,EAAMH,EAAa,IAArD,SAEA,4BAAQW,QAAS,WAAKR,GAAY,EAAKH,EAAa,IAApD,SAGDA,EAAa,EACZ,4BAAQW,QAAS,kBAAkBR,GAAdA,IAAyDA,EAA4B,IAAdH,EAAkB,OAAQ,UAEtH,GAEF,6BAAMI,EAAgBJ,EAAW,KAAOY,QAAQ,GAAhD,SApEFS,SAASC,eAAe,WANT,M","file":"static/js/main.a182ea47.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\n\nlet timerValue = 0; //current value of timer\nlet lastTime = 0; // last recorded time (used to calc time delta)\nlet timerType = \"Stopwatch\"; // can be stopwatch or countdown\nlet timerActive = false; //tracks timer state (active or not)\nlet countdownValue = 0; // stores value for countdown text box\nsetInterval(update,10); //how frequent to update page\n\n//main loop\nfunction update(){\n  ReactDOM.render(\n    page(),\n    document.getElementById('root')\n  );\n}\n\n//baseline page\n//loads stopwatchPage or countdownPage \"subpages\" based on timerType's value\nfunction page(){\n  updateTimer();\n  return(\n    <div id=\"main\">\n      <h2>{timerType}</h2>      \n      <br/>      \n      <button onClick={()=>{timerType=\"Stopwatch\";timerValue =0;timerActive=false;}}>Stopwatch</button>\n      <button onClick={()=>{timerType=\"Countdown\";timerValue =0;timerActive=false;}}>Countdown</button>\n      <hr></hr>\n      {timerType === \"Stopwatch\" ? stopwatchPage():countdownPage()}      \n    </div>\n  );\n}\n\n//returns stopwatch page and it's functionality (to be loaded within page())\nfunction stopwatchPage(){  \n  return(\n    <div>\n       {timerValue > 0 ? \n        <button onClick={()=>{timerActive=false;timerValue = 0}}>Reset</button> \n        : \n        <button onClick={()=>{timerActive=true;timerValue = 0}}>Start</button>\n      }\n      \n      {timerValue > 0 ?\n        <button onClick={()=>timerActive ? timerActive = false : timerActive = true}>{timerActive & timerValue !==0 ? \"Stop\": \"Resume\"}</button>\n        :\n        \"\"\n      }\n      <h1>{(timerValue/1000).toFixed(2)}s</h1>\n      \n\n     \n    </div>\n  );\n}\n\n//returns countdown page and it's functionality (to be loaded within page())\nfunction countdownPage(){\n  \n  if(countdownValue*1000-timerValue<0){\n    timerActive = false;\n    timerValue = countdownValue*1000;\n    playDing(); //play sound effect when countdown reaches 0\n  }\n  return(\n    <div>\n      {timerValue > 0 ? \"\":<input type=\"text\" placeholder=\"for how long?(sec)\" onChange={(event)=>countdownValue=event.target.value}></input>}\n      \n      \n\n      {timerValue > 0 ? \n        <button onClick={()=>{timerActive=false;timerValue = 0}}>Reset</button> \n        : \n        <button onClick={()=>{timerActive=true;timerValue = 0}}>Start</button>\n      }\n      \n      {timerValue > 0 ?\n        <button onClick={()=>timerActive ? timerActive = false : timerActive = true}>{timerActive & timerValue !==0 ? \"Stop\": \"Resume\"}</button>\n        :\n        \"\"\n      }\n      <h1>{(countdownValue-(timerValue/1000)).toFixed(2)}s</h1>\n      \n    </div>\n  );\n}\n\n//updates timer by adding the difference of time between now and previous recorded time\n//only changes timer value if timer is active\nfunction updateTimer(){\n  if(timerActive){\n    timerValue += Date.now()-lastTime;    \n  }\n  lastTime=Date.now();\n\n}\n\n//play sound effect\nfunction playDing(){\n  let audio = new Audio(\"https://raw.githubusercontent.com/xue021/unsorted-python-scripts/master/ding.mp3\");\n  audio.play();\n}"],"sourceRoot":""}